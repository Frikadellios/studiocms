---
// @ts-expect-error - This is a missing type definition for the `astro:db` import since its a virtual module during Astro Runtime
import { Admins, SiteConfig, db, eq } from 'astro:db';
import Default from "../../layouts/Default.astro"
import type { Locals } from "./locals";
import { getAstroBaseURL } from '../../utils';

const ConfigArray = await db.select().from(SiteConfig);
const contextConfig = ConfigArray[0];
const locals = Astro.locals as Locals;
const isLoggedIn = locals.isLoggedIn;

const isAdmin = async () => {
    const isAdminCheck = await db.select()
            .from(Admins)
            .where(eq(Admins.GitHubUsername, locals.user.username))
            .catch(() => {
        return false;
    })
    if (isAdminCheck[0] && isAdminCheck[0].GitHubUsername === locals.user.username) {
        return true;
    }
    return false;
};

if (!isLoggedIn) {
    return Astro.redirect(`${getAstroBaseURL()}dashboard/login`);
}

if (await isAdmin() === false) {
    console.log('User is not an admin');
    return Astro.redirect(`${getAstroBaseURL()}dashboard/profile`);
}

if (Astro.request.method === 'POST') {
    const formData = await new Request(Astro.request.url, {
        method: Astro.request.method,
        headers: Astro.request.headers,
        body: Buffer.from(await Astro.request.arrayBuffer()),
    }).formData();

    const title = formData.get('title');
    const description = formData.get('description');

    await db.update(SiteConfig)
        .set({
            title: title as string,
            description: description as string,
        }).where(eq(SiteConfig._id, "1")).then(() => {
            return new Response('Success', { status: 200 });
        }).catch(() => {
            return new Response('Error', { status: 500 });
        });

    return Astro.redirect(`${getAstroBaseURL()}dashboard/`)
}

---

<Default>
        <div class="dash">
            <div class="dash-header">
                <form class="left" method="post" action={`${getAstroBaseURL()}dashboard`}>
                    <button class="btn">Dashboard</button>
                </form>
                <form class="right" method="post" action={`${getAstroBaseURL()}dashboard/logout`}>
                    <button>Logout</button>
                </form>
            </div>
            <center>
                <h1>Site Configuration</h1>
            </center>

            <div>

                <form method="post" enctype="multipart/form-data" >
                
                    <label for="title">Site Title</label><br>
                    <input 
                        type="text" 
                        id="title" 
                        name="title" 
                        value={contextConfig.title} 
                        required><br>
                    <label for="description">Description</label><br>
                    <input
                        type="text" 
                        id="description" 
                        name="description" 
                        value={contextConfig.description}
                        required><br>

                    <center>
                        <button class="btn" type="submit">Update!</button>
                    </center>

                </form>

                
            </div>
        </div>
</Default>

<style>
    .dash {
        padding: 2rem;
        border: 2px solid #ccc;
        border-radius: 5rem;
        background-color: #fff;
        margin: 2rem;
        
    }
    bold {
        font-weight: bold;
    }
    .font-small {
        font-size: 1rem;
    }
    .dash-header {
        display: flex;
        justify-content: space-between;
    }
    .right {
        display: flex;
        justify-content: flex-end;
        padding-right: 4rem;
    }
    .left {
        display: flex;
        justify-content: flex-start;
        padding-left: 4rem;
    }
    button {
        padding: 1rem;
        background-color: rgb(202, 0, 0);
        font-weight: bold;
        color: #fff;
        border: none;
        border-radius: 99rem;
        cursor: pointer;
    }
    .btn {
        padding: 1rem;
        background-color: rgb(0, 37, 202);
        font-weight: bold;
        color: #fff;
        border: none;
        border-radius: 99rem;
        cursor: pointer;
    }
    input {
        background-color: #f4f4f4;
        border-radius: 10px;
        padding: 0.25rem;
        border: rgb(124, 124, 124) 1px solid;
        width: 35vmax;
    }
    textarea {
        background-color: #f4f4f4;
        border-radius: 10px;
        padding: 0.25rem;
        border: rgb(124, 124, 124) 1px solid;
        width: 100%;
    }
    label {
        font-size: large;
        font-weight: bold;
    }
    .info-text {
        font-size: small;
        display: inline;
        font-style: italic;
    }
    info {
        font-size: small;
        display: inline;
        font-style: italic;
    }

</style>