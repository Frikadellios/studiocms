---
import sitemap from 'sitemap-ext:config';
// @ts-expect-error - This is a missing type definition for the `astro:db` import since its a virtual module during Astro Runtime
import { Admins, Blog, db, eq } from 'astro:db';
import Default from "../../../layouts/Default.astro"
import type { Locals } from "../locals";
import { getAstroBaseURL } from '../../../utils';
import { rankCheck } from '../../../utils/rankcheck';

sitemap(false); // opt-out

const { slug } = Astro.params;

if (!slug) {
	return new Response('No slug provided', { status: 400 }) && Astro.redirect(`${getAstroBaseURL()}dashboard`);
}

const postArrayed = await db.select().from(Blog).where(eq(Blog.slug, slug));
const post = postArrayed[0];
const locals = Astro.locals as Locals;
const isLoggedIn = locals.isLoggedIn;

const getUserName = () => {
    if (locals.isLoggedIn) {
	    if (locals.dbUser.name) {
	    	return locals.dbUser.name;
	    } 
        return locals.user.username;
	} 
    return null;
};

const currentUserRank = await rankCheck(locals);

if (!isLoggedIn) {
    return Astro.redirect(`${getAstroBaseURL()}dashboard/login`);
}

if (currentUserRank !== "admin" && currentUserRank !== "editor") {
    console.log('User is not an admin');
    return Astro.redirect(`${getAstroBaseURL()}dashboard/profile`);
}

if (Astro.request.method === 'POST') {
    const formData = await new Request(Astro.request.url, {
        method: Astro.request.method,
        headers: Astro.request.headers,
        body: Buffer.from(await Astro.request.arrayBuffer()),
    }).formData();

    const title = formData.get('title');

    if (title === post.slug) {

        await db.delete(Blog)
            .where(eq(Blog.slug, post.slug))
            .then(() => {
                return new Response('Post deleted', { status: 200 });
            }).catch(() => {
                return new Response('Error deleting post', { status: 500 });
            });

        return Astro.redirect(`${getAstroBaseURL()}dashboard`)
    }
}

---

<Default>
        <div class="dash">
            <div class="dash-header">
                <form class="left" method="post" action={`${getAstroBaseURL()}dashboard`}>
                    <button class="btn">Dashboard</button>
                </form>
                <form class="right" method="post" action={`${getAstroBaseURL()}dashboard/logout`}>
                    <button>Logout</button>
                </form>
            </div>
            <center>
                <h1>Delete Post</h1>
                <h6> Post Name: {post.name} - Slug: {post.slug} </h6>
            </center>
            <div>
                <p class="font-small">
                Currently logged in as: <bold>{getUserName}</bold> 
                </p>

                <form method="post" enctype="multipart/form-data" >
                
                    <label for="title">Type the post slug to confirm</label><br>
                    <input 
                        type="text" 
                        id="title" 
                        name="title" 
                        placeholder="Your Post Slug (THIS WILL DELETE THE POST)"
                        required><br><br>

                    <button class="red-btn" type="submit">DELETE!</button>

                </form>

                
            </div>
        </div>
</Default>

<script>
import { markdown } from "../../../utils/marked";
    document.getElementById('content').addEventListener('input', async function () {
        const markdownContent = document.getElementById('content');
        const htmlPreview = document.getElementById('html-preview');
        const htmlContent = await markdown(markdownContent.value);

        htmlPreview.innerHTML = htmlContent;

    });
</script>

<style>
    .dash {
        padding: 2rem;
        border: 2px solid #ccc;
        border-radius: 5rem;
        background-color: #fff;
        margin: 2rem;
        
    }
    bold {
        font-weight: bold;
    }
    .font-small {
        font-size: 1rem;
    }
    .dash-header {
        display: flex;
        justify-content: space-between;
    }
    .right {
        display: flex;
        justify-content: flex-end;
        padding-right: 4rem;
    }
    .left {
        display: flex;
        justify-content: flex-start;
        padding-left: 4rem;
    }
    button {
        padding: 1rem;
        background-color: rgb(202, 0, 0);
        font-weight: bold;
        color: #fff;
        border: none;
        border-radius: 99rem;
        cursor: pointer;
    }
    .btn {
        padding: 1rem;
        background-color: rgb(0, 37, 202);
        font-weight: bold;
        color: #fff;
        border: none;
        border-radius: 99rem;
        cursor: pointer;
    }
    .grn-btn {
        padding: 1rem;
        background-color: rgb(0, 241, 0);
        font-weight: bold;
        color: #000000;
        border: none;
        border-radius: 99rem;
        cursor: pointer;
    }
    .red-btn {
        padding: 1rem;
        background-color: rgb(160, 0, 0);
        font-weight: bold;
        color: #000000;
        border: none;
        border-radius: 99rem;
        cursor: pointer;
    }
    input {
        background-color: #f4f4f4;
        border-radius: 10px;
        padding: 0.25rem;
        border: rgb(124, 124, 124) 1px solid;
        width: 35vmax;
    }
    textarea {
        background-color: #f4f4f4;
        border-radius: 10px;
        padding: 0.25rem;
        border: rgb(124, 124, 124) 1px solid;
        width: 100%;
    }
    label {
        font-size: large;
        font-weight: bold;
    }
    .info-text {
        font-size: small;
        display: inline;
        font-style: italic;
    }
    #editor {
        display: flex;
        position: relative;
        width: max-content;
    }
    #content,
    #html-preview {
        padding: 20px;
        width: 35vw;
        height: 400px;
        overflow-y: auto;
    }

    #content {
        background: #98a2ba;
        border: none;
        border-radius: 8px 0 0 8px;
        color: #000000;
        outline: none;
        resize: none;
    }

    #html-preview {
        background: #bbc8e1;
        border-radius: 0 8px 8px 0;
        color: #1f1f1f;
    }
    pre {
        display: inline;
        background-color: #f0f0f0;
        padding: 0rem;
        font-size: 1rem;

    }
</style>