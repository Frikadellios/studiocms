import{fileURLToPath as T}from"node:url";import{dirname as O,resolve as P}from"pathe";var k=e=>{let t=e;return t.startsWith("file://")&&(t=O(T(t))),{resolve:(...o)=>P(t,...o)}};import{AstroError as S}from"astro/errors";import{z as E}from"astro/zod";var f=(e,t)=>{let o=g(e.path);if(e.code==="invalid_union"){let i=new Map;for(let n of e.unionErrors.flatMap(r=>r.errors))if(n.code==="invalid_type"||n.code==="invalid_literal"){let r=g(n.path);i.has(r)?i.get(r).expected.push(n.expected):i.set(r,{code:n.code,received:n.received,expected:[n.expected]})}return{message:[p(o,i.size?"Did not match union:":"Did not match union.")].concat([...i.entries()].filter(([,n])=>n.expected.length===e.unionErrors.length).map(([n,r])=>n===o?`> ${c(r)}`:`> ${p(n,c(r))}`)).join(`
`)}}return e.code==="invalid_literal"||e.code==="invalid_type"?{message:p(o,c({code:e.code,received:e.received,expected:[e.expected]}))}:e.message?{message:p(o,e.message)}:{message:p(o,t.defaultError)}},c=e=>{if(e.received==="undefined")return"Required";let t=new Set(e.expected);switch(e.code){case"invalid_type":return`Expected type \`${u(t)}\`, received ${JSON.stringify(e.received)}`;case"invalid_literal":return`Expected \`${u(t)}\`, received ${JSON.stringify(e.received)}`}},p=(e,t)=>e.length?`**${e}**: ${t}`:t,u=e=>[...e].map((t,o)=>o===0?JSON.stringify(t):` | ${JSON.stringify(t)}`).join(""),g=e=>e.join(".");var A=({name:e,optionsSchema:t,setup:o,plugins:i})=>(...l)=>{let n=(t??E.never().optional()).safeParse(l[0],{errorMap:f});if(!n.success)throw new S(`Invalid options passed to "${e}" integration
`,n.error.issues.map(s=>s.message).join(`
`));let r=n.data,y=Object.values((()=>{let s={};for(let a of i??[])s[a.name]=a;return s})()),m=o({name:e,options:r}),h=Object.keys(m),v=Object.fromEntries(h.map(s=>[s,a=>{let x=y.filter(d=>d.hook===s);return m[s]?.({...a,...Object.fromEntries(x.map(d=>[d.name,d.implementation(a,{name:e})]))})}]));return{name:e,hooks:v}};var H=e=>e;export{k as createResolver,A as defineIntegration,H as definePlugin};
//# sourceMappingURL=index.js.map