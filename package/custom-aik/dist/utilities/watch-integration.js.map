{"version":3,"sources":["../../src/utilities/watch-integration.ts"],"sourcesContent":["import { readdirSync, statSync } from \"node:fs\";\nimport type { HookParameters } from \"astro\";\nimport { join, relative, resolve } from \"pathe\";\n\nconst getFilesRecursively = (dir: string, baseDir = dir) => {\n\tconst files = readdirSync(dir);\n\tlet filepaths: Array<string> = [];\n\n\tfor (const file of files) {\n\t\tconst filepath = join(dir, file);\n\t\tconst _stat = statSync(filepath);\n\n\t\tif (_stat.isDirectory()) {\n\t\t\t// Recursively get files from subdirectories\n\t\t\tconst subDirectoryFiles = getFilesRecursively(filepath, baseDir);\n\t\t\tfilepaths = filepaths.concat(subDirectoryFiles);\n\t\t} else {\n\t\t\t// Calculate relative path and add it to the array\n\t\t\tconst relativePath = relative(baseDir, filepath);\n\t\t\tfilepaths.push(relativePath);\n\t\t}\n\t}\n\n\treturn filepaths;\n};\n\n/**\n * In development, will reload the Astro dev server if any files within\n * the integration directory has changed.\n *\n * @param {object} params\n * @param {string} params.dir\n * @param {import(\"astro\").HookParameters<\"astro:config:setup\">[\"addWatchFile\"]} params.addWatchFile\n * @param {import(\"astro\").HookParameters<\"astro:config:setup\">[\"command\"]} params.command\n * @param {import(\"astro\").HookParameters<\"astro:config:setup\">[\"updateConfig\"]} params.updateConfig\n *\n * @see https://astro-integration-kit.netlify.app/utilities/watch-integration/\n *\n * @example\n * ```ts\n * watchIntegration({\n * \t\tdir: resolve(),\n * \t\taddWatchFile,\n * \t\tcommand,\n * \t\tupdateConfig,\n * })\n * ```\n */\nexport const watchIntegration = ({\n\taddWatchFile,\n\tcommand,\n\tdir,\n\tupdateConfig,\n}: {\n\taddWatchFile: HookParameters<\"astro:config:setup\">[\"addWatchFile\"];\n\tcommand: HookParameters<\"astro:config:setup\">[\"command\"];\n\tdir: string;\n\tupdateConfig: HookParameters<\"astro:config:setup\">[\"updateConfig\"];\n}) => {\n\tif (command !== \"dev\") {\n\t\treturn;\n\t}\n\n\tconst paths = getFilesRecursively(dir).map((p) => resolve(dir, p));\n\n\tfor (const path of paths) {\n\t\taddWatchFile(path);\n\t}\n\n\tupdateConfig({\n\t\tvite: {\n\t\t\tplugins: [\n\t\t\t\t{\n\t\t\t\t\tname: \"rollup-plugin-astro-tailwind-config-viewer\",\n\t\t\t\t\tbuildStart() {\n\t\t\t\t\t\tfor (const path of paths) {\n\t\t\t\t\t\t\tthis.addWatchFile(path);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t});\n};\n"],"mappings":"AAAA,OAAS,eAAAA,EAAa,YAAAC,MAAgB,UAEtC,OAAS,QAAAC,EAAM,YAAAC,EAAU,WAAAC,MAAe,QAExC,IAAMC,EAAsB,CAACC,EAAaC,EAAUD,IAAQ,CAC3D,IAAME,EAAQR,EAAYM,CAAG,EACzBG,EAA2B,CAAC,EAEhC,QAAWC,KAAQF,EAAO,CACzB,IAAMG,EAAWT,EAAKI,EAAKI,CAAI,EAG/B,GAFcT,EAASU,CAAQ,EAErB,YAAY,EAAG,CAExB,IAAMC,EAAoBP,EAAoBM,EAAUJ,CAAO,EAC/DE,EAAYA,EAAU,OAAOG,CAAiB,CAC/C,KAAO,CAEN,IAAMC,EAAeV,EAASI,EAASI,CAAQ,EAC/CF,EAAU,KAAKI,CAAY,CAC5B,CACD,CAEA,OAAOJ,CACR,EAwBaK,EAAmB,CAAC,CAChC,aAAAC,EACA,QAAAC,EACA,IAAAV,EACA,aAAAW,CACD,IAKM,CACL,GAAID,IAAY,MACf,OAGD,IAAME,EAAQb,EAAoBC,CAAG,EAAE,IAAKa,GAAMf,EAAQE,EAAKa,CAAC,CAAC,EAEjE,QAAWC,KAAQF,EAClBH,EAAaK,CAAI,EAGlBH,EAAa,CACZ,KAAM,CACL,QAAS,CACR,CACC,KAAM,6CACN,YAAa,CACZ,QAAWG,KAAQF,EAClB,KAAK,aAAaE,CAAI,CAExB,CACD,CACD,CACD,CACD,CAAC,CACF","names":["readdirSync","statSync","join","relative","resolve","getFilesRecursively","dir","baseDir","files","filepaths","file","filepath","subDirectoryFiles","relativePath","watchIntegration","addWatchFile","command","updateConfig","paths","p","path"]}