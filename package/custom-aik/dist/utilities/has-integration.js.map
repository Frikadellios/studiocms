{"version":3,"sources":["../../src/utilities/has-integration.ts"],"sourcesContent":["import type { HookParameters } from \"astro\";\nimport { AstroError } from \"astro/errors\";\n\ntype HasIntegrationParams = (\n\t| { position?: undefined; relativeTo?: string }\n\t| { position: \"before\" | \"after\"; relativeTo: string }\n) & {\n\tname: string;\n\tconfig: HookParameters<\"astro:config:setup\">[\"config\"];\n};\n\n/**\n * Checks whether an integration is already installed.\n *\n * If `before` is given, returns true only if the integration is installed before the named|provided integration.\n * If `after` is given, returns true only if the integration is installed after the named|provided integration.\n *\n * @param {object} params\n * @param {string} params.name - Integration to look up.\n * @param {undefined | \"before\" | \"after\"} params.position - Position in relation to another integration to check.\n * @param {undefined | string} params.relativeTo - Other integration to check for relative poisition.\n * @param {config} params.config\n *\n * @returns {boolean}\n *\n * @throws {AstroError} When `params.position` is defined but `params.relativeTo` isn't.\n *\n * @see https://astro-integration-kit.netlify.app/utilities/has-integration/\n *\n * @example\n * ```ts\n * hasIntegration({\n * \t\tname: \"@astrojs/tailwind\",\n * \t\tconfig\n * })\n * ```\n */\nexport const hasIntegration = ({\n\tname,\n\tposition,\n\trelativeTo,\n\tconfig,\n}: HasIntegrationParams): boolean => {\n\tconst integrationPosition = config.integrations.findIndex(\n\t\t(integration) => integration.name === name,\n\t);\n\n\t// Integration is not installed\n\tif (integrationPosition === -1) return false;\n\n\t// Not a relative check, the integration is present.\n\tif (position === undefined) return true;\n\n\tif (relativeTo === undefined)\n\t\tthrow new AstroError(\n\t\t\t\"Cannot perform a relative integration check without a relative reference.\",\n\t\t\t\"Pass `relativeTo` on your call to `hasIntegration` or remove the `position` option.\",\n\t\t);\n\n\tconst otherPosition = config.integrations.findIndex(\n\t\t(integration) => integration.name === relativeTo,\n\t);\n\n\tif (otherPosition === -1)\n\t\tthrow new AstroError(\n\t\t\t\"Cannot check relative position against an absent integration.\",\n\t\t);\n\n\treturn position === \"before\"\n\t\t? integrationPosition < otherPosition\n\t\t: integrationPosition > otherPosition;\n};\n"],"mappings":"AACA,OAAS,cAAAA,MAAkB,eAoCpB,IAAMC,EAAiB,CAAC,CAC9B,KAAAC,EACA,SAAAC,EACA,WAAAC,EACA,OAAAC,CACD,IAAqC,CACpC,IAAMC,EAAsBD,EAAO,aAAa,UAC9CE,GAAgBA,EAAY,OAASL,CACvC,EAGA,GAAII,IAAwB,GAAI,MAAO,GAGvC,GAAIH,IAAa,OAAW,MAAO,GAEnC,GAAIC,IAAe,OAClB,MAAM,IAAIJ,EACT,4EACA,qFACD,EAED,IAAMQ,EAAgBH,EAAO,aAAa,UACxCE,GAAgBA,EAAY,OAASH,CACvC,EAEA,GAAII,IAAkB,GACrB,MAAM,IAAIR,EACT,+DACD,EAED,OAAOG,IAAa,SACjBG,EAAsBE,EACtBF,EAAsBE,CAC1B","names":["AstroError","hasIntegration","name","position","relativeTo","config","integrationPosition","integration","otherPosition"]}