import{AstroError as g}from"astro/errors";function f(t){let e=[];if(t){for(let r of t)if(r){if(Array.isArray(r)){e.push(...f(r));continue}r instanceof Promise||e.push(r.name)}}return e}var a=({plugin:t,config:e})=>{if(!t||t instanceof Promise)return!1;let r=new Set(f(e?.vite?.plugins)),n=new Set;if(typeof t=="string"&&n.add(t),typeof t=="object")if(Array.isArray(t)){let i=new Set(f(t));for(let o of i)n.add(o)}else n.add(t.name);return[...n].some(i=>r.has(i))};var m=({warnDuplicated:t=!0,plugin:e,config:r,logger:n,updateConfig:i})=>{t&&r&&n&&a({plugin:e,config:r})&&n.warn(`The Vite plugin "${e.name}" is already present in your Vite configuration, this plugin may not behave correctly.`),i({vite:{plugins:[e]}})};var P=t=>{let e=1;return`${t.replace(/-(\d+)$/,(r,n)=>(e=parseInt(n)+1,""))}-${e}`},l=t=>`\0${t}`,y=(t,e)=>{let r=Array.isArray(e)?e:Object.entries(e).map(([o,s])=>({id:o,content:s,context:void 0})),n={};for(let{id:o,context:s}of r)n[o]??=[],n[o]?.push(...s===void 0?["server","client"]:[s]);for(let[o,s]of Object.entries(n))if(s.length!==[...new Set(s)].length)throw new g(`Virtual import with id "${o}" has been registered several times with conflicting contexts.`);let i=Object.fromEntries(r.map(({id:o})=>{if(o.startsWith("astro:"))throw new g(`Virtual import name prefix can't be "astro:" (for "${o}") because it's reserved for Astro core.`);return[l(o),o]}));return{name:t,resolveId(o){if(r.find(s=>s.id===o))return l(o)},load(o,s){let u=i[o];if(u){let d=s?.ssr?"server":"client",p=r.find(c=>c.id===u&&c.context===void 0?!0:c.context===d);if(p)return p.content}}}},O=({name:t,imports:e,config:r,updateConfig:n})=>{let i=`vite-plugin-${t}`;for(;a({plugin:i,config:r});)i=P(i);m({warnDuplicated:!1,plugin:y(i,e),updateConfig:n})};export{O as addVirtualImports};
//# sourceMappingURL=add-virtual-imports.js.map