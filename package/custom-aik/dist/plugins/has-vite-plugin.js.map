{"version":3,"sources":["../../src/core/define-plugin.ts","../../src/utilities/has-vite-plugin.ts","../../src/plugins/has-vite-plugin.ts"],"sourcesContent":["import type { Hooks, Plugin } from \"./types.js\";\n\n/**\n * Allows defining a type-safe plugin that can be used in {defineIntegration}.\n *\n * @param {object} plugin\n * @param {string} plugin.name - The name of the plugin, as you want it to be called from the hook\n * @param {string} plugin.hook - The name of the hook where this plugin should be available\n * @param {Function} plugin.implementation - The actual function definition. Refer to docs for usage\n *\n * @see https://astro-integration-kit.netlify.app/utilities/define-plugin/\n *\n * ```ts\n * import { definePlugin } from \"../core/define-plugin.js\";\n * import { addVitePlugin } from \"../utilities/add-vite-plugin.js\";\n * import type { Plugin as VitePlugin } from \"vite\"\n *\n * export const addVitePluginPlugin = definePlugin({\n * \t\tname: \"addVitePlugin\",\n * \t\thook: \"astro:config:setup\",\n * \t\timplementation: ({ updateConfig }) => (plugin: VitePlugin) => addVitePlugin({ plugin, updateConfig }),\n * });\n * ```\n */\nexport const definePlugin = <\n\tTName extends string,\n\tTHook extends keyof Hooks,\n\tTImplementation extends (...args: Array<any>) => any,\n>(\n\tplugin: Plugin<TName, THook, TImplementation>,\n) => plugin;\n","import type { AstroConfig, HookParameters } from \"astro\";\nimport type { PluginOption } from \"vite\";\n\nfunction getPluginNames(plugins: AstroConfig[\"vite\"][\"plugins\"]) {\n\tconst names: string[] = [];\n\n\tif (plugins) {\n\t\tfor (const plugin of plugins) {\n\t\t\tif (!plugin) continue;\n\n\t\t\tif (Array.isArray(plugin)) {\n\t\t\t\tnames.push(...getPluginNames(plugin));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (plugin instanceof Promise) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnames.push(plugin.name);\n\t\t}\n\t}\n\n\treturn names;\n}\n\n/**\n * Checks for the existence of a Vite plugin inside the Astro config.\n *\n * @param {Params} params\n * @param {string|import(\"vite\").PluginOption} params.plugin\n * @param {import(\"astro\").HookParameters<\"astro:config:setup\">[\"config\"]} params.config\n *\n * @see https://astro-integration-kit.netlify.app/utilities/has-vite-plugin/\n *\n * @example\n * ```ts\n * hasVitePlugin({\n * \t\tplugin: \"vite-plugin-my-integration\",\n * \t\tconfig\n * })\n * ```\n */\nexport const hasVitePlugin = ({\n\tplugin,\n\tconfig,\n}: {\n\tplugin: string | PluginOption;\n\tconfig: HookParameters<\"astro:config:setup\">[\"config\"];\n}): boolean => {\n\tif (!plugin || plugin instanceof Promise) return false;\n\n\tconst currentPlugins = new Set(getPluginNames(config?.vite?.plugins));\n\n\tconst plugins = new Set<string>();\n\n\tif (typeof plugin === \"string\") {\n\t\tplugins.add(plugin);\n\t}\n\n\tif (typeof plugin === \"object\") {\n\t\tif (Array.isArray(plugin)) {\n\t\t\tconst names = new Set(\n\t\t\t\tgetPluginNames(plugin as NonNullable<AstroConfig[\"vite\"][\"plugins\"]>),\n\t\t\t);\n\t\t\tfor (const name of names) plugins.add(name);\n\t\t} else {\n\t\t\tplugins.add(plugin.name);\n\t\t}\n\t}\n\n\treturn [...plugins].some((name) => currentPlugins.has(name));\n};\n","import type { AstroConfig } from \"astro\";\nimport type { Plugin, PluginOption } from \"vite\";\nimport { definePlugin } from \"../core/define-plugin.js\";\nimport { hasVitePlugin } from \"../utilities/has-vite-plugin.js\";\n\nfunction getPlugins(\n\tstore: Set<Plugin<any>>,\n\tplugins: AstroConfig[\"vite\"][\"plugins\"],\n) {\n\tif (plugins) {\n\t\tfor (const plugin of plugins) {\n\t\t\tif (!plugin) continue;\n\n\t\t\tif (Array.isArray(plugin)) {\n\t\t\t\tgetPlugins(store, plugin);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (plugin instanceof Promise) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tstore.add(plugin);\n\t\t}\n\t}\n\treturn store;\n}\n\nexport const hasVitePluginPlugin = definePlugin({\n\tname: \"hasVitePlugin\",\n\thook: \"astro:config:setup\",\n\timplementation: (params) => {\n\t\tconst currentPlugins = getPlugins(new Set(), params.config.vite?.plugins);\n\n\t\tconst { updateConfig, config } = params;\n\n\t\tparams.updateConfig = (newConfig) => {\n\t\t\tconfig.vite.plugins = Array.from(\n\t\t\t\tgetPlugins(currentPlugins, newConfig.vite?.plugins),\n\t\t\t);\n\t\t\treturn updateConfig(newConfig);\n\t\t};\n\n\t\treturn (plugin: string | PluginOption) =>\n\t\t\thasVitePlugin({\n\t\t\t\tplugin,\n\t\t\t\tconfig,\n\t\t\t});\n\t},\n});\n"],"mappings":"AAwBO,IAAMA,EAKZC,GACIA,EC3BL,SAASC,EAAeC,EAAyC,CAChE,IAAMC,EAAkB,CAAC,EAEzB,GAAID,GACH,QAAWE,KAAUF,EACpB,GAAKE,EAEL,IAAI,MAAM,QAAQA,CAAM,EAAG,CAC1BD,EAAM,KAAK,GAAGF,EAAeG,CAAM,CAAC,EACpC,QACD,CAEIA,aAAkB,SAItBD,EAAM,KAAKC,EAAO,IAAI,GAIxB,OAAOD,CACR,CAmBO,IAAME,EAAgB,CAAC,CAC7B,OAAAD,EACA,OAAAE,CACD,IAGe,CACd,GAAI,CAACF,GAAUA,aAAkB,QAAS,MAAO,GAEjD,IAAMG,EAAiB,IAAI,IAAIN,EAAeK,GAAQ,MAAM,OAAO,CAAC,EAE9DJ,EAAU,IAAI,IAMpB,GAJI,OAAOE,GAAW,UACrBF,EAAQ,IAAIE,CAAM,EAGf,OAAOA,GAAW,SACrB,GAAI,MAAM,QAAQA,CAAM,EAAG,CAC1B,IAAMD,EAAQ,IAAI,IACjBF,EAAeG,CAAqD,CACrE,EACA,QAAWI,KAAQL,EAAOD,EAAQ,IAAIM,CAAI,CAC3C,MACCN,EAAQ,IAAIE,EAAO,IAAI,EAIzB,MAAO,CAAC,GAAGF,CAAO,EAAE,KAAMM,GAASD,EAAe,IAAIC,CAAI,CAAC,CAC5D,ECnEA,SAASC,EACRC,EACAC,EACC,CACD,GAAIA,GACH,QAAWC,KAAUD,EACpB,GAAKC,EAEL,IAAI,MAAM,QAAQA,CAAM,EAAG,CAC1BH,EAAWC,EAAOE,CAAM,EACxB,QACD,CAEIA,aAAkB,SAItBF,EAAM,IAAIE,CAAM,GAGlB,OAAOF,CACR,CAEO,IAAMG,EAAsBC,EAAa,CAC/C,KAAM,gBACN,KAAM,qBACN,eAAiBC,GAAW,CAC3B,IAAMC,EAAiBP,EAAW,IAAI,IAAOM,EAAO,OAAO,MAAM,OAAO,EAElE,CAAE,aAAAE,EAAc,OAAAC,CAAO,EAAIH,EAEjC,OAAAA,EAAO,aAAgBI,IACtBD,EAAO,KAAK,QAAU,MAAM,KAC3BT,EAAWO,EAAgBG,EAAU,MAAM,OAAO,CACnD,EACOF,EAAaE,CAAS,GAGtBP,GACPQ,EAAc,CACb,OAAAR,EACA,OAAAM,CACD,CAAC,CACH,CACD,CAAC","names":["definePlugin","plugin","getPluginNames","plugins","names","plugin","hasVitePlugin","config","currentPlugins","name","getPlugins","store","plugins","plugin","hasVitePluginPlugin","definePlugin","params","currentPlugins","updateConfig","config","newConfig","hasVitePlugin"]}