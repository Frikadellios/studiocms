var c=t=>t;import{AstroError as g}from"astro/errors";function u(t){let e=[];if(t){for(let r of t)if(r){if(Array.isArray(r)){e.push(...u(r));continue}r instanceof Promise||e.push(r.name)}}return e}var a=({plugin:t,config:e})=>{if(!t||t instanceof Promise)return!1;let r=new Set(u(e?.vite?.plugins)),n=new Set;if(typeof t=="string"&&n.add(t),typeof t=="object")if(Array.isArray(t)){let i=new Set(u(t));for(let o of i)n.add(o)}else n.add(t.name);return[...n].some(i=>r.has(i))};var l=({warnDuplicated:t=!0,plugin:e,config:r,logger:n,updateConfig:i})=>{t&&r&&n&&a({plugin:e,config:r})&&n.warn(`The Vite plugin "${e.name}" is already present in your Vite configuration, this plugin may not behave correctly.`),i({vite:{plugins:[e]}})};var h=t=>{let e=1;return`${t.replace(/-(\d+)$/,(r,n)=>(e=parseInt(n)+1,""))}-${e}`},d=t=>`\0${t}`,x=(t,e)=>{let r=Array.isArray(e)?e:Object.entries(e).map(([o,s])=>({id:o,content:s,context:void 0})),n={};for(let{id:o,context:s}of r)n[o]??=[],n[o]?.push(...s===void 0?["server","client"]:[s]);for(let[o,s]of Object.entries(n))if(s.length!==[...new Set(s)].length)throw new g(`Virtual import with id "${o}" has been registered several times with conflicting contexts.`);let i=Object.fromEntries(r.map(({id:o})=>{if(o.startsWith("astro:"))throw new g(`Virtual import name prefix can't be "astro:" (for "${o}") because it's reserved for Astro core.`);return[d(o),o]}));return{name:t,resolveId(o){if(r.find(s=>s.id===o))return d(o)},load(o,s){let m=i[o];if(m){let y=s?.ssr?"server":"client",f=r.find(p=>p.id===m&&p.context===void 0?!0:p.context===y);if(f)return f.content}}}},P=({name:t,imports:e,config:r,updateConfig:n})=>{let i=`vite-plugin-${t}`;for(;a({plugin:i,config:r});)i=h(i);l({warnDuplicated:!1,plugin:x(i,e),updateConfig:n})};var C=c({name:"addVirtualImports",hook:"astro:config:setup",implementation:({config:t,updateConfig:e},{name:r})=>n=>{P({name:r,imports:n,config:t,updateConfig:e})}});export{C as addVirtualImportsPlugin};
//# sourceMappingURL=add-virtual-imports.js.map