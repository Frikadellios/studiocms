var d=e=>e;import{readFileSync as V}from"node:fs";import"astro";import{fileURLToPath as x}from"node:url";import{dirname as H,resolve as O}from"pathe";var g=e=>{let t=e;return t.startsWith("file://")&&(t=H(x(t))),{resolve:(...r)=>O(t,...r)}};import{AstroError as y}from"astro/errors";function u(e){let t=[];if(e){for(let r of e)if(r){if(Array.isArray(r)){t.push(...u(r));continue}r instanceof Promise||t.push(r.name)}}return t}var c=({plugin:e,config:t})=>{if(!e||e instanceof Promise)return!1;let r=new Set(u(t?.vite?.plugins)),o=new Set;if(typeof e=="string"&&o.add(e),typeof e=="object")if(Array.isArray(e)){let i=new Set(u(e));for(let n of i)o.add(n)}else o.add(e.name);return[...o].some(i=>r.has(i))};var P=({warnDuplicated:e=!0,plugin:t,config:r,logger:o,updateConfig:i})=>{e&&r&&o&&c({plugin:t,config:r})&&o.warn(`The Vite plugin "${t.name}" is already present in your Vite configuration, this plugin may not behave correctly.`),i({vite:{plugins:[t]}})};var S=e=>{let t=1;return`${e.replace(/-(\d+)$/,(r,o)=>(t=parseInt(o)+1,""))}-${t}`},v=e=>`\0${e}`,I=(e,t)=>{let r=Array.isArray(t)?t:Object.entries(t).map(([n,a])=>({id:n,content:a,context:void 0})),o={};for(let{id:n,context:a}of r)o[n]??=[],o[n]?.push(...a===void 0?["server","client"]:[a]);for(let[n,a]of Object.entries(o))if(a.length!==[...new Set(a)].length)throw new y(`Virtual import with id "${n}" has been registered several times with conflicting contexts.`);let i=Object.fromEntries(r.map(({id:n})=>{if(n.startsWith("astro:"))throw new y(`Virtual import name prefix can't be "astro:" (for "${n}") because it's reserved for Astro core.`);return[v(n),n]}));return{name:e,resolveId(n){if(r.find(a=>a.id===n))return v(n)},load(n,a){let p=i[n];if(p){let l=a?.ssr?"server":"client",m=r.find(s=>s.id===p&&s.context===void 0?!0:s.context===l);if(m)return m.content}}}},A=({name:e,imports:t,config:r,updateConfig:o})=>{let i=`vite-plugin-${e}`;for(;c({plugin:i,config:r});)i=S(i);P({warnDuplicated:!1,plugin:I(i,t),updateConfig:o})};var k=({id:e,name:t,icon:r,framework:o,src:i,style:n,config:a,addDevToolbarApp:p,updateConfig:l,injectScript:m})=>{let s=`virtual:astro-devtoolbar-app-${e}`,{resolve:b}=g(import.meta.url),f=V(b(`../stubs/add-devtoolbar-framework-app/${o}.js`),"utf-8"),w=r.replace("`",'${"`"}');f=f.replace("@@COMPONENT_SRC@@",i).replace("@@ID@@",e).replace("@@NAME@@",t).replace("@@ICON@@",w).replace("@@STYLE@@",n??""),A({name:e,imports:{[s]:f},config:a,updateConfig:l}),o==="react"&&import("@vitejs/plugin-react").then(T=>{let h=T.default.preambleCode.replace("__BASE__","/");m("page",h)}),p(s)};var K=d({name:"addDevToolbarFrameworkApp",hook:"astro:config:setup",implementation:({config:e,addDevToolbarApp:t,updateConfig:r,injectScript:o})=>i=>k({...i,addDevToolbarApp:t,updateConfig:r,injectScript:o,config:e})});export{K as addDevToolbarFrameworkAppPlugin};
//# sourceMappingURL=add-devtoolbar-framework-app.js.map