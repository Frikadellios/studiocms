{"version":3,"sources":["../../src/core/define-plugin.ts","../../src/utilities/add-devtoolbar-framework-app.ts","../../src/core/create-resolver.ts","../../src/utilities/add-virtual-imports.ts","../../src/utilities/has-vite-plugin.ts","../../src/utilities/add-vite-plugin.ts","../../src/plugins/add-devtoolbar-framework-app.ts"],"sourcesContent":["import type { Hooks, Plugin } from \"./types.js\";\n\n/**\n * Allows defining a type-safe plugin that can be used in {defineIntegration}.\n *\n * @param {object} plugin\n * @param {string} plugin.name - The name of the plugin, as you want it to be called from the hook\n * @param {string} plugin.hook - The name of the hook where this plugin should be available\n * @param {Function} plugin.implementation - The actual function definition. Refer to docs for usage\n *\n * @see https://astro-integration-kit.netlify.app/utilities/define-plugin/\n *\n * ```ts\n * import { definePlugin } from \"../core/define-plugin.js\";\n * import { addVitePlugin } from \"../utilities/add-vite-plugin.js\";\n * import type { Plugin as VitePlugin } from \"vite\"\n *\n * export const addVitePluginPlugin = definePlugin({\n * \t\tname: \"addVitePlugin\",\n * \t\thook: \"astro:config:setup\",\n * \t\timplementation: ({ updateConfig }) => (plugin: VitePlugin) => addVitePlugin({ plugin, updateConfig }),\n * });\n * ```\n */\nexport const definePlugin = <\n\tTName extends string,\n\tTHook extends keyof Hooks,\n\tTImplementation extends (...args: Array<any>) => any,\n>(\n\tplugin: Plugin<TName, THook, TImplementation>,\n) => plugin;\n","import { readFileSync } from \"node:fs\";\nimport { type HookParameters } from \"astro\";\nimport { createResolver } from \"../core/create-resolver.js\";\nimport { addVirtualImports } from \"./add-virtual-imports.js\";\n\ntype SupportedFrameworks = \"react\" | \"preact\" | \"vue\" | \"svelte\" | \"solid\";\n\nexport type AddDevToolbarFrameworkAppParams = {\n\tid: string;\n\tname: string;\n\ticon: string;\n\tframework: SupportedFrameworks;\n\tsrc: string;\n\tstyle?: string;\n} & Pick<\n\tHookParameters<\"astro:config:setup\">,\n\t\"config\" | \"addDevToolbarApp\" | \"updateConfig\" | \"injectScript\"\n>;\n\n/**\n * Add a Dev Toolbar Plugin that uses a Framework component.\n *\n * @param {object} params\n * @param {string} params.name - The name of the toolbar plugin\n * @param {string} params.icon - This should be an inline SVG\n * @param {string} params.framework - The framework your component is using. Can be either \"react\", \"vue\", \"svelte\", \"solid\", or \"preact\"\n * @param {URL} params.src - Path to your component\n * @param {string} params.style - A stylesheet to pass to your plugin\n * @param {import(\"astro\").HookParameters<\"astro:config:setup\">[\"config\"]} params.config\n * @param {import(\"astro\").HookParameters<\"astro:config:setup\">[\"updateConfig\"]} params.updateConfig\n * @param {import(\"astro\").HookParameters<\"astro:config:setup\">[\"addDevToolbarApp\"]} params.addDevToolbarApp\n * @param {import(\"astro\").HookParameters<\"astro:config:setup\">[\"injectScript\"]} params.injectScript\n *\n * @example\n * ```ts\n * addDevToolbarFrameworkApp({\n *      framework: \"vue\",\n *      name: \"Test Vue Plugin\",\n *      id: \"test-vue-plugin\",\n *      icon: `<svg version=\"1.1\" viewBox=\"0 0 261.76 226.69\" xmlns=\"http://www.w3.org/2000/svg\"><g transform=\"matrix(1.3333 0 0 -1.3333 -76.311 313.34)\"><g transform=\"translate(178.06 235.01)\"><path d=\"m0 0-22.669-39.264-22.669 39.264h-75.491l98.16-170.02 98.16 170.02z\" fill=\"#41b883\"/></g><g transform=\"translate(178.06 235.01)\"><path d=\"m0 0-22.669-39.264-22.669 39.264h-36.227l58.896-102.01 58.896 102.01z\" fill=\"#34495e\"/></g></g></svg>`,\n *      src: resolve(\"./Test.vue\"),\n *      style: `\n *          button {\n *              background-color: rebeccapurple;\n *          }\n *      `,\n *      config\n * });\n * ```\n *\n * @see https://astro-integration-kit.netlify.app/utilities/add-devtoolbar-framework-app/\n */\nexport const addDevToolbarFrameworkApp = ({\n\tid,\n\tname,\n\ticon,\n\tframework,\n\tsrc,\n\tstyle,\n\tconfig,\n\taddDevToolbarApp,\n\tupdateConfig,\n\tinjectScript,\n}: AddDevToolbarFrameworkAppParams) => {\n\tconst virtualModuleName = `virtual:astro-devtoolbar-app-${id}`;\n\n\tconst { resolve } = createResolver(import.meta.url);\n\n\tlet content = readFileSync(\n\t\tresolve(`../stubs/add-devtoolbar-framework-app/${framework}.js`),\n\t\t\"utf-8\",\n\t);\n\n\tconst escapedIcon = icon.replace(\"`\", '${\"`\"}');\n\n\tcontent = content\n\t\t.replace(\"@@COMPONENT_SRC@@\", src)\n\t\t.replace(\"@@ID@@\", id)\n\t\t.replace(\"@@NAME@@\", name)\n\t\t.replace(\"@@ICON@@\", escapedIcon)\n\t\t.replace(\"@@STYLE@@\", style ?? \"\");\n\n\taddVirtualImports({\n\t\tname: id,\n\t\timports: { [virtualModuleName]: content },\n\t\tconfig,\n\t\tupdateConfig,\n\t});\n\n\tif (framework === \"react\") {\n\t\timport(\"@vitejs/plugin-react\").then((react) => {\n\t\t\tconst FAST_REFRESH_PREAMBLE = react.default.preambleCode;\n\t\t\tconst preamble = FAST_REFRESH_PREAMBLE.replace(\"__BASE__\", \"/\");\n\t\t\tinjectScript(\"page\", preamble);\n\t\t});\n\t}\n\n\taddDevToolbarApp(virtualModuleName);\n};\n","import { fileURLToPath } from \"node:url\";\nimport { dirname, resolve } from \"pathe\";\n\n/**\n * Allows resolving paths relatively to the integration folder easily. Call it like this:\n *\n * @param {string} _base - The location you want to create relative references from. `import.meta.url` is usually what you'll want.\n *\n * @see https://astro-integration-kit.netlify.app/utilities/create-resolver/\n *\n * @example\n * ```ts\n * const { resolve } = createResolver(import.meta.url);\n * const pluginPath = resolve(\"./plugin.ts\");\n * ```\n *\n * This way, you do not have to add your plugin to your package.json `exports`.\n */\nexport const createResolver = (_base: string) => {\n\tlet base = _base;\n\tif (base.startsWith(\"file://\")) {\n\t\tbase = dirname(fileURLToPath(base));\n\t}\n\n\treturn {\n\t\tresolve: (...path: Array<string>) => resolve(base, ...path),\n\t};\n};\n","import { AstroError } from \"astro/errors\";\nimport type { Plugin } from \"vite\";\nimport type { HookParameters } from \"../core/types.js\";\nimport { addVitePlugin } from \"./add-vite-plugin.js\";\nimport { hasVitePlugin } from \"./has-vite-plugin.js\";\n\ntype VirtualImport = {\n\tid: string;\n\tcontent: string;\n\tcontext?: \"server\" | \"client\" | undefined;\n};\n\ntype Imports = Record<string, string> | Array<VirtualImport>;\n\nconst incrementPluginName = (name: string) => {\n\tlet count = 1;\n\treturn `${name.replace(/-(\\d+)$/, (_, c) => {\n\t\tcount = parseInt(c) + 1;\n\t\treturn \"\";\n\t})}-${count}`;\n};\n\nconst resolveVirtualModuleId = <T extends string>(id: T): `\\0${T}` => {\n\treturn `\\0${id}`;\n};\n\nconst createVirtualModule = (name: string, _imports: Imports): Plugin => {\n\t// We normalize the imports into an array\n\tconst imports: Array<VirtualImport> = Array.isArray(_imports)\n\t\t? _imports\n\t\t: Object.entries(_imports).map(([id, content]) => ({\n\t\t\t\tid,\n\t\t\t\tcontent,\n\t\t\t\tcontext: undefined,\n\t\t  }));\n\n\t// We check for virtual imports with overlapping contexts, eg. several imports\n\t// with the same id and context server\n\tconst duplicatedImports: Record<string, Array<string>> = {};\n\tfor (const { id, context } of imports) {\n\t\tduplicatedImports[id] ??= [];\n\t\tduplicatedImports[id]?.push(\n\t\t\t...(context === undefined ? [\"server\", \"client\"] : [context]),\n\t\t);\n\t}\n\tfor (const [id, contexts] of Object.entries(duplicatedImports)) {\n\t\tif (contexts.length !== [...new Set(contexts)].length) {\n\t\t\tthrow new AstroError(\n\t\t\t\t`Virtual import with id \"${id}\" has been registered several times with conflicting contexts.`,\n\t\t\t);\n\t\t}\n\t}\n\n\tconst resolutionMap = Object.fromEntries(\n\t\timports.map(({ id }) => {\n\t\t\tif (id.startsWith(\"astro:\")) {\n\t\t\t\tthrow new AstroError(\n\t\t\t\t\t`Virtual import name prefix can't be \"astro:\" (for \"${id}\") because it's reserved for Astro core.`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn [resolveVirtualModuleId(id), id];\n\t\t}),\n\t);\n\n\treturn {\n\t\tname,\n\t\tresolveId(id) {\n\t\t\tif (imports.find((_import) => _import.id === id)) {\n\t\t\t\treturn resolveVirtualModuleId(id);\n\t\t\t}\n\t\t\treturn;\n\t\t},\n\t\tload(id, options) {\n\t\t\tconst resolution = resolutionMap[id];\n\t\t\tif (resolution) {\n\t\t\t\tconst context = options?.ssr ? \"server\" : \"client\";\n\t\t\t\tconst data = imports.find((_import) =>\n\t\t\t\t\t_import.id === resolution && _import.context === undefined\n\t\t\t\t\t\t? true\n\t\t\t\t\t\t: _import.context === context,\n\t\t\t\t);\n\n\t\t\t\tif (data) {\n\t\t\t\t\treturn data.content;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t},\n\t};\n};\n\ntype HookParameterProperties = Pick<\n\tHookParameters<\"astro:config:setup\">,\n\t\"config\" | \"updateConfig\"\n>;\n\n/**\n * Creates a Vite virtual module and updates the Astro config.\n * Virtual imports are useful for passing things like config options, or data computed within the integration.\n *\n * @param {object} params\n * @param {string} params.name\n * @param {Imports} params.imports\n * @param {import(\"astro\").HookParameters<\"astro:config:setup\">[\"updateConfig\"]} params.updateConfig\n *\n * @see https://astro-integration-kit.netlify.app/utilities/add-virtual-imports/\n *\n * @example\n * ```ts\n * // my-integration/index.ts\n * import { addVirtualImports } from \"astro-integration-kit\";\n *\n * addVirtualImports(\n * \t\tname: 'my-integration',\n * \t\tconfig,\n * \t\tupdateConfig,\n * \t\timports: {\n * \t\t\t'virtual:my-integration/config': `export default ${ JSON.stringify({foo: \"bar\"}) }`,\n * \t\t}\n * );\n * ```\n *\n * This is then readable anywhere else in your integration:\n *\n * ```ts\n * // myIntegration/src/component/layout.astro\n * import config from \"virtual:my-integration/config\";\n *\n * console.log(config.foo) // \"bar\"\n * ```\n */\nexport const addVirtualImports = ({\n\tname,\n\timports,\n\tconfig,\n\tupdateConfig,\n}: HookParameterProperties & {\n\tname: string;\n\timports: Imports;\n}) => {\n\tlet pluginName = `vite-plugin-${name}`;\n\n\twhile (hasVitePlugin({ plugin: pluginName, config }))\n\t\tpluginName = incrementPluginName(pluginName);\n\n\taddVitePlugin({\n\t\twarnDuplicated: false,\n\t\tplugin: createVirtualModule(pluginName, imports),\n\t\tupdateConfig,\n\t});\n};\n","import type { AstroConfig, HookParameters } from \"astro\";\nimport type { PluginOption } from \"vite\";\n\nfunction getPluginNames(plugins: AstroConfig[\"vite\"][\"plugins\"]) {\n\tconst names: string[] = [];\n\n\tif (plugins) {\n\t\tfor (const plugin of plugins) {\n\t\t\tif (!plugin) continue;\n\n\t\t\tif (Array.isArray(plugin)) {\n\t\t\t\tnames.push(...getPluginNames(plugin));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (plugin instanceof Promise) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnames.push(plugin.name);\n\t\t}\n\t}\n\n\treturn names;\n}\n\n/**\n * Checks for the existence of a Vite plugin inside the Astro config.\n *\n * @param {Params} params\n * @param {string|import(\"vite\").PluginOption} params.plugin\n * @param {import(\"astro\").HookParameters<\"astro:config:setup\">[\"config\"]} params.config\n *\n * @see https://astro-integration-kit.netlify.app/utilities/has-vite-plugin/\n *\n * @example\n * ```ts\n * hasVitePlugin({\n * \t\tplugin: \"vite-plugin-my-integration\",\n * \t\tconfig\n * })\n * ```\n */\nexport const hasVitePlugin = ({\n\tplugin,\n\tconfig,\n}: {\n\tplugin: string | PluginOption;\n\tconfig: HookParameters<\"astro:config:setup\">[\"config\"];\n}): boolean => {\n\tif (!plugin || plugin instanceof Promise) return false;\n\n\tconst currentPlugins = new Set(getPluginNames(config?.vite?.plugins));\n\n\tconst plugins = new Set<string>();\n\n\tif (typeof plugin === \"string\") {\n\t\tplugins.add(plugin);\n\t}\n\n\tif (typeof plugin === \"object\") {\n\t\tif (Array.isArray(plugin)) {\n\t\t\tconst names = new Set(\n\t\t\t\tgetPluginNames(plugin as NonNullable<AstroConfig[\"vite\"][\"plugins\"]>),\n\t\t\t);\n\t\t\tfor (const name of names) plugins.add(name);\n\t\t} else {\n\t\t\tplugins.add(plugin.name);\n\t\t}\n\t}\n\n\treturn [...plugins].some((name) => currentPlugins.has(name));\n};\n","import type { HookParameters } from \"astro\";\nimport type { Plugin, PluginOption } from \"vite\";\nimport { hasVitePlugin } from \"./has-vite-plugin.js\";\n\ninterface CommonOptions {\n\tplugin: PluginOption;\n\tupdateConfig: HookParameters<\"astro:config:setup\">[\"updateConfig\"];\n}\n\ninterface UnsafeOptions extends CommonOptions {\n\twarnDuplicated: false;\n\tconfig?: HookParameters<\"astro:config:setup\">[\"config\"];\n\tlogger?: HookParameters<\"astro:config:setup\">[\"logger\"];\n}\n\ninterface SafeOptions extends CommonOptions {\n\twarnDuplicated?: true;\n\tconfig: HookParameters<\"astro:config:setup\">[\"config\"];\n\tlogger: HookParameters<\"astro:config:setup\">[\"logger\"];\n}\n\n/**\n * Adds a [vite plugin](https://vitejs.dev/guide/using-plugins) to the\n * Astro config.\n *\n * @param {Params} params\n * @param {boolean} [params.warnDuplicated=true]\n * @param {import(\"vite\").PluginOption} params.plugin\n * @param {import(\"astro\").HookParameters<\"astro:config:setup\">[\"config\"]} params.config\n * @param {import(\"astro\").HookParameters<\"astro:config:setup\">[\"logger\"]} params.logger\n * @param {import(\"astro\").HookParameters<\"astro:config:setup\">[\"updateConfig\"]} params.updateConfig\n *\n * @see https://astro-integration-kit.netlify.app/utilities/add-vite-plugin/\n *\n * @example\n * ```ts\n * addVitePlugin({\n * \t\tplugin,\n * \t\tconfig,\n * \t\tlogger,\n * \t\tupdateConfig\n * })\n * ```\n */\nexport const addVitePlugin = ({\n\twarnDuplicated = true,\n\tplugin,\n\tconfig,\n\tlogger,\n\tupdateConfig,\n}: UnsafeOptions | SafeOptions) => {\n\tif (warnDuplicated && config && logger && hasVitePlugin({ plugin, config })) {\n\t\tlogger.warn(\n\t\t\t`The Vite plugin \"${\n\t\t\t\t(plugin as Plugin).name\n\t\t\t}\" is already present in your Vite configuration, this plugin may not behave correctly.`,\n\t\t);\n\t}\n\n\tupdateConfig({\n\t\tvite: {\n\t\t\tplugins: [plugin],\n\t\t},\n\t});\n};\n","import { definePlugin } from \"../core/define-plugin.js\";\nimport {\n\ttype AddDevToolbarFrameworkAppParams,\n\taddDevToolbarFrameworkApp,\n} from \"../utilities/add-devtoolbar-framework-app.js\";\n\nexport const addDevToolbarFrameworkAppPlugin = definePlugin({\n\tname: \"addDevToolbarFrameworkApp\",\n\thook: \"astro:config:setup\",\n\timplementation:\n\t\t({ config, addDevToolbarApp, updateConfig, injectScript }) =>\n\t\t(\n\t\t\tparams: Omit<\n\t\t\t\tAddDevToolbarFrameworkAppParams,\n\t\t\t\t\"config\" | \"addDevToolbarApp\" | \"updateConfig\" | \"injectScript\"\n\t\t\t>,\n\t\t) =>\n\t\t\taddDevToolbarFrameworkApp({\n\t\t\t\t...params,\n\t\t\t\taddDevToolbarApp,\n\t\t\t\tupdateConfig,\n\t\t\t\tinjectScript,\n\t\t\t\tconfig,\n\t\t\t}),\n});\n"],"mappings":"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","names":["definePlugin","plugin","readFileSync","fileURLToPath","dirname","resolve","createResolver","_base","base","path","AstroError","getPluginNames","plugins","names","plugin","hasVitePlugin","config","currentPlugins","name","addVitePlugin","warnDuplicated","plugin","config","logger","updateConfig","hasVitePlugin","incrementPluginName","name","count","_","c","resolveVirtualModuleId","id","createVirtualModule","_imports","imports","content","duplicatedImports","context","contexts","AstroError","resolutionMap","_import","options","resolution","data","addVirtualImports","config","updateConfig","pluginName","hasVitePlugin","addVitePlugin","addDevToolbarFrameworkApp","id","name","icon","framework","src","style","config","addDevToolbarApp","updateConfig","injectScript","virtualModuleName","resolve","createResolver","content","readFileSync","escapedIcon","addVirtualImports","react","preamble","addDevToolbarFrameworkAppPlugin","definePlugin","config","addDevToolbarApp","updateConfig","injectScript","params","addDevToolbarFrameworkApp"]}