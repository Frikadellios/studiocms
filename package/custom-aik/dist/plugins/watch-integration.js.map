{"version":3,"sources":["../../src/core/define-plugin.ts","../../src/utilities/watch-integration.ts","../../src/plugins/watch-integration.ts"],"sourcesContent":["import type { Hooks, Plugin } from \"./types.js\";\n\n/**\n * Allows defining a type-safe plugin that can be used in {defineIntegration}.\n *\n * @param {object} plugin\n * @param {string} plugin.name - The name of the plugin, as you want it to be called from the hook\n * @param {string} plugin.hook - The name of the hook where this plugin should be available\n * @param {Function} plugin.implementation - The actual function definition. Refer to docs for usage\n *\n * @see https://astro-integration-kit.netlify.app/utilities/define-plugin/\n *\n * ```ts\n * import { definePlugin } from \"../core/define-plugin.js\";\n * import { addVitePlugin } from \"../utilities/add-vite-plugin.js\";\n * import type { Plugin as VitePlugin } from \"vite\"\n *\n * export const addVitePluginPlugin = definePlugin({\n * \t\tname: \"addVitePlugin\",\n * \t\thook: \"astro:config:setup\",\n * \t\timplementation: ({ updateConfig }) => (plugin: VitePlugin) => addVitePlugin({ plugin, updateConfig }),\n * });\n * ```\n */\nexport const definePlugin = <\n\tTName extends string,\n\tTHook extends keyof Hooks,\n\tTImplementation extends (...args: Array<any>) => any,\n>(\n\tplugin: Plugin<TName, THook, TImplementation>,\n) => plugin;\n","import { readdirSync, statSync } from \"node:fs\";\nimport type { HookParameters } from \"astro\";\nimport { join, relative, resolve } from \"pathe\";\n\nconst getFilesRecursively = (dir: string, baseDir = dir) => {\n\tconst files = readdirSync(dir);\n\tlet filepaths: Array<string> = [];\n\n\tfor (const file of files) {\n\t\tconst filepath = join(dir, file);\n\t\tconst _stat = statSync(filepath);\n\n\t\tif (_stat.isDirectory()) {\n\t\t\t// Recursively get files from subdirectories\n\t\t\tconst subDirectoryFiles = getFilesRecursively(filepath, baseDir);\n\t\t\tfilepaths = filepaths.concat(subDirectoryFiles);\n\t\t} else {\n\t\t\t// Calculate relative path and add it to the array\n\t\t\tconst relativePath = relative(baseDir, filepath);\n\t\t\tfilepaths.push(relativePath);\n\t\t}\n\t}\n\n\treturn filepaths;\n};\n\n/**\n * In development, will reload the Astro dev server if any files within\n * the integration directory has changed.\n *\n * @param {object} params\n * @param {string} params.dir\n * @param {import(\"astro\").HookParameters<\"astro:config:setup\">[\"addWatchFile\"]} params.addWatchFile\n * @param {import(\"astro\").HookParameters<\"astro:config:setup\">[\"command\"]} params.command\n * @param {import(\"astro\").HookParameters<\"astro:config:setup\">[\"updateConfig\"]} params.updateConfig\n *\n * @see https://astro-integration-kit.netlify.app/utilities/watch-integration/\n *\n * @example\n * ```ts\n * watchIntegration({\n * \t\tdir: resolve(),\n * \t\taddWatchFile,\n * \t\tcommand,\n * \t\tupdateConfig,\n * })\n * ```\n */\nexport const watchIntegration = ({\n\taddWatchFile,\n\tcommand,\n\tdir,\n\tupdateConfig,\n}: {\n\taddWatchFile: HookParameters<\"astro:config:setup\">[\"addWatchFile\"];\n\tcommand: HookParameters<\"astro:config:setup\">[\"command\"];\n\tdir: string;\n\tupdateConfig: HookParameters<\"astro:config:setup\">[\"updateConfig\"];\n}) => {\n\tif (command !== \"dev\") {\n\t\treturn;\n\t}\n\n\tconst paths = getFilesRecursively(dir).map((p) => resolve(dir, p));\n\n\tfor (const path of paths) {\n\t\taddWatchFile(path);\n\t}\n\n\tupdateConfig({\n\t\tvite: {\n\t\t\tplugins: [\n\t\t\t\t{\n\t\t\t\t\tname: \"rollup-plugin-astro-tailwind-config-viewer\",\n\t\t\t\t\tbuildStart() {\n\t\t\t\t\t\tfor (const path of paths) {\n\t\t\t\t\t\t\tthis.addWatchFile(path);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t});\n};\n","import { definePlugin } from \"../core/define-plugin.js\";\nimport { watchIntegration } from \"../utilities/watch-integration.js\";\n\nexport const watchIntegrationPlugin = definePlugin({\n\tname: \"watchIntegration\",\n\thook: \"astro:config:setup\",\n\timplementation:\n\t\t({ addWatchFile, command, updateConfig }) =>\n\t\t(dir: string) =>\n\t\t\twatchIntegration({ dir, command, addWatchFile, updateConfig }),\n});\n"],"mappings":"AAwBO,IAAMA,EAKZC,GACIA,EC9BL,OAAS,eAAAC,EAAa,YAAAC,MAAgB,UAEtC,OAAS,QAAAC,EAAM,YAAAC,EAAU,WAAAC,MAAe,QAExC,IAAMC,EAAsB,CAACC,EAAaC,EAAUD,IAAQ,CAC3D,IAAME,EAAQR,EAAYM,CAAG,EACzBG,EAA2B,CAAC,EAEhC,QAAWC,KAAQF,EAAO,CACzB,IAAMG,EAAWT,EAAKI,EAAKI,CAAI,EAG/B,GAFcT,EAASU,CAAQ,EAErB,YAAY,EAAG,CAExB,IAAMC,EAAoBP,EAAoBM,EAAUJ,CAAO,EAC/DE,EAAYA,EAAU,OAAOG,CAAiB,CAC/C,KAAO,CAEN,IAAMC,EAAeV,EAASI,EAASI,CAAQ,EAC/CF,EAAU,KAAKI,CAAY,CAC5B,CACD,CAEA,OAAOJ,CACR,EAwBaK,EAAmB,CAAC,CAChC,aAAAC,EACA,QAAAC,EACA,IAAAV,EACA,aAAAW,CACD,IAKM,CACL,GAAID,IAAY,MACf,OAGD,IAAME,EAAQb,EAAoBC,CAAG,EAAE,IAAKa,GAAMf,EAAQE,EAAKa,CAAC,CAAC,EAEjE,QAAWC,KAAQF,EAClBH,EAAaK,CAAI,EAGlBH,EAAa,CACZ,KAAM,CACL,QAAS,CACR,CACC,KAAM,6CACN,YAAa,CACZ,QAAWG,KAAQF,EAClB,KAAK,aAAaE,CAAI,CAExB,CACD,CACD,CACD,CACD,CAAC,CACF,EChFO,IAAMC,EAAyBC,EAAa,CAClD,KAAM,mBACN,KAAM,qBACN,eACC,CAAC,CAAE,aAAAC,EAAc,QAAAC,EAAS,aAAAC,CAAa,IACtCC,GACAC,EAAiB,CAAE,IAAAD,EAAK,QAAAF,EAAS,aAAAD,EAAc,aAAAE,CAAa,CAAC,CAChE,CAAC","names":["definePlugin","plugin","readdirSync","statSync","join","relative","resolve","getFilesRecursively","dir","baseDir","files","filepaths","file","filepath","subDirectoryFiles","relativePath","watchIntegration","addWatchFile","command","updateConfig","paths","p","path","watchIntegrationPlugin","definePlugin","addWatchFile","command","updateConfig","dir","watchIntegration"]}