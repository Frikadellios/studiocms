---
import Default from "../../layouts/Default.astro"
import type { Locals } from "./locals";
import { Blog, Admins, db, eq } from 'astro:db';

const locals = Astro.locals as Locals;
const isLoggedIn = locals.isLoggedIn;

if (!isLoggedIn) {
    return Astro.redirect('/dashboard/login');
}

const getUserName = () => {
    if (locals.isLoggedIn) {
	    if (locals.dbUser.name) {
	    	return locals.dbUser.name;
	    } else {
	    	return locals.user.username;
	    }
    } 
    return null;
};

const adminList = await db.select().from(Admins);

const isAdmin = async (user: string) => {
    if (adminList.includes({GitHubUsername: user})) {
        return true;
    }
    return false;
};

//@ts-ignore
if (!isAdmin(locals.user.username)) {
    console.log('User is not an admin');
    return Astro.redirect('/dashboard');
}

if (Astro.request.method === 'POST') {
    const formData = await new Request(Astro.request.url, {
        method: Astro.request.method,
        headers: Astro.request.headers,
        body: Buffer.from(await Astro.request.arrayBuffer()),
    }).formData();

    const title = formData.get('title');
    const slug = formData.get('slug');
    const description = formData.get('description');
    const heroImage = formData.get('hero-image');
    const content = formData.get('content');

    const postArrayed = await db.select().from(Blog).where(eq(Blog.slug, slug as string));
    const existingPost = postArrayed[0];

    if (existingPost) {
        return new Response('Post with that slug already exists', { status: 400 });
    }

    await db.insert(Blog)
        .values({
            title: title as string,
            slug: slug as string,
            description: description as string,
            heroImage: heroImage as string,
            content: content as string,
        }).then(() => {
            return new Response('Post created', { status: 200 });
        }).catch((err) => {
            return new Response('Error creating post', { status: 500 });
        });

    return Astro.redirect('/dashboard');

}

---

<Default>
        <div class="dash">
            <div class="dash-header">
                <form class="left" method="post" action="/dashboard">
                    <button class="btn">Dashboard</button>
                </form>
                <form class="right" method="post" action="/dashboard/logout">
                    <button>Logout</button>
                </form>
            </div>
            <center>
                <h1>Create a new post</h1>
            </center>
            <div>
                <p class="font-small">
                Currently logged in as: <bold>{getUserName}</bold> 
                </p>

                <form method="post" enctype="multipart/form-data" >
                
                    <label for="title">Title:</label><br>
                    <input type="text" id="title" name="title" required><br><br>
                    <label for="slug">Slug:</label><br>
                    <input type="text" id="slug" name="slug" required><br><br>
                    <label for="description">Description:</label><br>
                    <input type="text" id="description" name="description" required><br><br>
                    <label for="hero-image">Hero Image:</label><br>
                    <input type="text" id="hero-image" name="hero-image" required><br><br>
                    <label for="content">Content:</label><br>
                    <textarea id="content" name="content" data-provide="markdown" rows="10" required></textarea><br><br>

                    <button class="btn" type="submit">Create!</button>

                </form>

                
            </div>
        </div>
</Default>

<style>
    .dash {
        padding: 2rem;
        border: 2px solid #ccc;
        border-radius: 5rem;
        background-color: #fff;
        margin: 2rem;
        
    }
    bold {
        font-weight: bold;
    }
    .font-small {
        font-size: 1rem;
    }
    .dash-header {
        display: flex;
        justify-content: space-between;
    }
    .right {
        display: flex;
        justify-content: flex-end;
        padding-right: 4rem;
    }
    .left {
        display: flex;
        justify-content: flex-start;
        padding-left: 4rem;
    }
    button {
        padding: 1rem;
        background-color: rgb(202, 0, 0);
        font-weight: bold;
        color: #fff;
        border: none;
        border-radius: 99rem;
        cursor: pointer;
    }
    .btn {
        padding: 1rem;
        background-color: rgb(0, 37, 202);
        font-weight: bold;
        color: #fff;
        border: none;
        border-radius: 99rem;
        cursor: pointer;
    }
</style>